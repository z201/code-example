version : '3'
networks:
  network-docker-app:
    driver: bridge

services:
  web:
    container_name: cn.z201.docker-mysql-redis
    build:
      context: .
      dockerfile: .
    image: cn.z201.docker-mysql-redis
    networks:
      - network-docker-app
    expose:
      - '9010'
    ports:
      - '9010:9010'
    depends_on: # 等待其它服务启动完成
      - mysql
      - redis
    links:
      - mysql
      - redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: "/bin/netstat -anpt|grep 9010"
      interval: 30s
      timeout: 3s
      retries: 1
  mysql:
    image: mysql:8.0
    container_name: mysql8.0-mysql-redis
    networks:
      - network-docker-app
    expose:
      - '3306'
    ports:
      - '3314:3306'
    volumes:
      - ./docker-config/mysql/my.cnf:/etc/mysql/my.cnf # 映射数据库配置文件
      - ./docker-config/mysql/init:/docker-entrypoint-initdb.d # 初始化数据库
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--lower_case_table_names=1',
      '--default-time-zone=+8:00',
      '--default-authentication-plugin=mysql_native_password']
    environment:
      - MYSQL_ROOT_PASSWORD=root # 设置root密码
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1024M
        reservations:
          cpus: '0.4'
          memory: 512M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: "/bin/netstat -anpt|grep 3306"
      interval: 30s
      timeout: 3s
      retries: 1
  redis:
    image: redis:6.2
    container_name: redis6.2-mysql-redis
    networks:
      - network-docker-app
    expose:
      - '6379'
    ports:
      - '6379:6379'
    volumes:
      - ./docker-config/redis/redis.conf:/etc/redis.conf
    command: redis-server /etc/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    healthcheck:
      test: "/bin/netstat -anpt|grep 6379"
      interval: 30s
      timeout: 3s
      retries: 1    volumes:
      - ./docker-config/redis/redis.conf:/etc/redis.conf # 映射数据库配置文件
    command: redis-server /etc/redis.conf # 启动redis命令
    healthcheck:
      test: "/bin/netstat -anpt|grep 6379"
      interval: 30s
      timeout: 3s
      retries: 1
